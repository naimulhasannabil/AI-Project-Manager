generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  clerkId       String     @unique
  email         String     @unique
  name          String?
  avatar        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  comments      Comment[]
  projects      Project[]
  assignedTasks Task[]     @relation("TaskAssignee")
  ownedTasks    Task[]     @relation("TaskOwner")
  teams         TeamUser[]

  @@map("users")
}

model Team {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projects    Project[]
  members     TeamUser[]

  @@map("teams")
}

model TeamUser {
  id     String   @id @default(cuid())
  teamId String
  userId String
  role   TeamRole @default(MEMBER)
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String?       @default("#3b82f6")
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  teamId      String?
  aiInsights  AIInsight[]
  team        Team?         @relation(fields: [teamId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  tasks       Task[]

  @@map("projects")
}

model Task {
  id             String         @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus     @default(TODO)
  priority       TaskPriority   @default(MEDIUM)
  dueDate        DateTime?
  estimatedHours Float?
  actualHours    Float?
  position       Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String
  projectId      String
  assigneeId     String?
  aiSuggestions  AISuggestion[]
  comments       Comment[]
  subtasks       Subtask[]
  assignee       User?          @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project        Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User           @relation("TaskOwner", fields: [userId], references: [id])

  @@map("tasks")
}

model Subtask {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  position  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model AIInsight {
  id        String        @id @default(cuid())
  type      AIInsightType
  content   String
  data      Json?
  createdAt DateTime      @default(now())
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("ai_insights")
}

model AISuggestion {
  id        String           @id @default(cuid())
  type      AISuggestionType
  content   String
  data      Json?
  applied   Boolean          @default(false)
  createdAt DateTime         @default(now())
  taskId    String
  task      Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("ai_suggestions")
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AIInsightType {
  DEADLINE_RISK
  RESOURCE_ALLOCATION
  PROGRESS_UPDATE
  TEAM_PERFORMANCE
}

enum AISuggestionType {
  SUBTASK_BREAKDOWN
  DEADLINE_ADJUSTMENT
  PRIORITY_CHANGE
  RESOURCE_REALLOCATION
}
